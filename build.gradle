plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'java-library'
    id 'net.minecrell.licenser' version '0.4.1'
}

group = project.maven_group
version = "${project.mod_version}+${project.minecraft_version}"
archivesBaseName = project.archives_base_name + "-fabric"

minecraft {
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "AperLambda"
        url = 'https://aperlambda.github.io/maven'
    }
    maven { url = "https://jitpack.io" }
    maven {
        name = 'Earthcomputer Mods'
        url = 'https://dl.bintray.com/earthcomputer/mods'
    }
}

configurations {
    shadow
    implementation.extendsFrom shadow
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //modRuntime "io.github.prospector:modmenu:${project.modmenu_version}"

    //modRuntime "com.terraformersmc:terrestria:2.1.5+build.28"
    //modRuntime "com.terraformersmc:traverse:3.0.3+build.13"

    shadow ("org.aperlambda:lambdajcommon:1.8.1") {
        // Minecraft already has all that google crap.
        exclude group: 'com.google.code.gson'
        exclude group: 'com.google.guava'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withSourcesJar()
}

jar {
    from "../LICENSE"

    from {
        configurations.shadow.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

license {
    header file('HEADER')
    include '**/*.java'
}
